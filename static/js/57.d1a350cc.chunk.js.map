{"version":3,"sources":["pages/user/register/index.js","pages/user/register/style.module.scss"],"names":["Register","antd_es_form__WEBPACK_IMPORTED_MODULE_15__","create","state","loading","onSubmit","event","preventDefault","_this","props","form","validateFields","error","values","setState","authService","signUp","then","registeredUser","user","catch","err","antd_es_notification__WEBPACK_IMPORTED_MODULE_9__","message","description","compareToFirstPassword","rule","value","callback","getFieldValue","intl","formatMessage","id","validateToNextPassword","confirmDirty","force","handleConfirmBlur","e","target","checkAgreement","sendToken","res","console","log","_this$props","this","_this$state","react__WEBPACK_IMPORTED_MODULE_16___default","a","createElement","react_helmet__WEBPACK_IMPORTED_MODULE_17__","title","className","styles","block","inner","react_intl__WEBPACK_IMPORTED_MODULE_19__","name","email","antd_es_button__WEBPACK_IMPORTED_MODULE_7__","type","ghost","onClick","react_router_dom__WEBPACK_IMPORTED_MODULE_18__","to","layout","hideRequiredMark","Item","getFieldDecorator","rules","required","antd_es_input__WEBPACK_IMPORTED_MODULE_5__","placeholder","prefix","antd_es_icon__WEBPACK_IMPORTED_MODULE_3__","style","color","hasFeedback","validator","onBlur","valuePropName","initialValue","antd_es_checkbox__WEBPACK_IMPORTED_MODULE_1__","htmlType","href","Component","injectIntl","module","exports","login"],"mappings":"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","file":"static/js/57.d1a350cc.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Form, Input, Button, Checkbox, Icon, notification } from 'antd'\nimport { Helmet } from 'react-helmet'\nimport { Link } from 'react-router-dom'\nimport { FormattedMessage, injectIntl } from 'react-intl'\nimport { authService } from '../../../services'\nimport styles from './style.module.scss'\n\n@Form.create()\nclass Register extends Component {\n  state ={\n    loading: false\n  }\n\n  onSubmit = event => {\n    event.preventDefault()\n    const { form } = this.props\n    form.validateFields((error, values) => {\n      if (!error) {\n        this.setState({loading: true})\n        authService.signUp(values)\n          .then((registeredUser) => {\n            this.setState({user: registeredUser, loading: false})\n          })\n          .catch((err) => {\n            notification.error({\n              message: 'Failed',\n              description: err,\n            })\n            this.setState({loading: false})\n          })\n      }\n    })\n  }\n\n  compareToFirstPassword = (rule, value, callback) => {\n    const { form } = this.props\n    if (value && value !== form.getFieldValue('password')) {\n      const {intl} = this.props;\n      callback(intl.formatMessage({id: 'user.register.passwordConfirmMessage'}))\n    } else {\n      callback()\n    }\n  }\n\n  validateToNextPassword = (rule, value, callback) => {\n    const { form } = this.props\n    const { confirmDirty } = this.state\n    if (value && confirmDirty) {\n      form.validateFields(['confirm'], { force: true })\n    }\n    callback()\n  }\n\n  handleConfirmBlur = e => {\n    const { value } = e.target\n    const { confirmDirty } = this.state\n    this.setState({\n      confirmDirty: confirmDirty || !!value,\n    })\n  }\n\n  checkAgreement = (rule, value, callback) => {\n    if (!value) {\n      const {intl} = this.props;\n      callback(intl.formatMessage({id: 'user.register.agreementMessage'}))\n    } else {\n      callback()\n    }\n  }\n\n  sendToken = () => {\n    const {user} = this.state;\n    authService.sendToken({id:user.id}).then(res => {\n      console.log(res);\n    })\n  }\n\n  render() {\n    const { form, intl } = this.props\n    const { loading, user } = this.state\n    return (\n      <div>\n        <Helmet title={intl.formatMessage({id:'user.register'})} />\n        <div className={styles.block}>\n          <div className=\"row\">\n            <div className=\"col-xl-12\">\n              <div className={styles.inner}>\n                {user &&\n                  <div>\n                    <h4>\n                      <strong>\n                        <FormattedMessage id=\"user.register.hi\" />\n                        {user.name},\n                        <FormattedMessage id=\"user.register.thanks\" />\n                      </strong>\n                    </h4>\n                    <p className=\"mb-3\"><FormattedMessage id=\"user.register.confirmationEmail\" /> {user.email}.</p>\n                    <p className=\"mb-3\"><FormattedMessage id=\"user.register.instructions\" /></p>\n                    <div className=\"mb-3\">\n                      <Button type=\"primary\" ghost onClick={this.sendToken}>\n                        <FormattedMessage id=\"user.register.resend\" />\n                      </Button>\n                      {' '}\n                      <FormattedMessage id=\"user.register.resendMessage\" />\n                    </div>\n                    <Link to=\"/user/login\" className=\"btn\">\n                      &larr; <FormattedMessage id=\"user.register.continue\" />\n                    </Link>\n                  </div>\n                }\n\n                {!user &&\n                  <div className={styles.form}>\n                    <h4 className=\"text-uppercase\">\n                      <strong><FormattedMessage id=\"user.register.header\" /></strong>\n                    </h4>\n                    <p><FormattedMessage id=\"user.register.subtitle\" /></p>\n                    <br />\n                    <Form layout=\"vertical\" hideRequiredMark onSubmit={this.onSubmit}>\n                      <Form.Item>\n                        {form.getFieldDecorator('name', {\n                          rules: [{ required: true, message: intl.formatMessage({id:'user.register.nameMessage'}) }],\n                        })(\n                          <Input placeholder={intl.formatMessage({id:'user.register.name'})} />,\n                        )}\n                      </Form.Item>\n                      <Form.Item>\n                        {form.getFieldDecorator('surname', {\n                          rules: [{ required: true, message: intl.formatMessage({id:'user.register.surnameMessage'}) }],\n                        })(\n                          <Input placeholder={intl.formatMessage({id:'user.register.surname'})} />,\n                        )}\n                      </Form.Item>\n                      <Form.Item>\n                        {form.getFieldDecorator('email', {\n                          rules: [{ required: true, message: intl.formatMessage({id:'user.register.emailMessage'}) }],\n                        })(\n                          <Input\n                            prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                            type=\"email\"\n                            placeholder={intl.formatMessage({id:'user.register.email'})}\n                          />,\n                        )}\n                      </Form.Item>\n                      <Form.Item hasFeedback>\n                        {form.getFieldDecorator('password', {\n                          rules: [\n                            {\n                              required: true,\n                              message: intl.formatMessage({id:'user.register.passwordMessage'})\n                            },\n                            {\n                              validator: this.validateToNextPassword,\n                            },\n                          ],\n                        })(\n                          <Input\n                            prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                            type=\"password\"\n                            placeholder={intl.formatMessage({id:'user.register.password'})}\n                          />,\n                        )}\n                      </Form.Item>\n                      <Form.Item hasFeedback>\n                        {form.getFieldDecorator('confirm', {\n                          rules: [\n                            {\n                              required: true,\n                              message: intl.formatMessage({id:'user.register.confirmMessage'})\n                            },\n                            {\n                              validator: this.compareToFirstPassword,\n                            },\n                          ],\n                        })(\n                          <Input\n                            type=\"password\"\n                            onBlur={this.handleConfirmBlur}\n                            placeholder={intl.formatMessage({id:'user.register.confirm'})}\n                          />,\n                        )}\n                      </Form.Item>\n                      <Form.Item>\n                        {form.getFieldDecorator('i', {\n                          valuePropName: 'checked',\n                          initialValue: false,\n                          rules: [\n                            {\n                              validator: this.checkAgreement,\n                            },\n                          ],\n                        })(\n                          <Checkbox>\n                            <span className=\"ml-3 register-link\">\n                              <FormattedMessage id=\"user.register.agreement\" />\n                            </span>\n                          </Checkbox>\n                        )}\n                      </Form.Item>\n                      <div className=\"form-actions\">\n                        <Button\n                          type=\"primary\"\n                          className=\"width-150 mr-4\"\n                          htmlType=\"submit\"\n                          loading={loading}\n                        >\n                          <FormattedMessage id=\"user.register\" />\n                        </Button>\n                        <span className=\"ml-3 register-link\">\n                          <a\n                            href=\"/#/user/login\"\n                            className=\"text-primary utils__link--underlined\"\n                          >\n                            <FormattedMessage id=\"user.register.login\" />\n                          </a>{' '}\n                          <FormattedMessage id=\"user.register.loginMessage\" />\n                        </span>\n                      </div>\n                    </Form>\n                  </div>\n                }\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default injectIntl(Register)\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"style_login__3E0CU\",\"title\":\"style_title__3er5X\",\"block\":\"style_block___-cjH\",\"inner\":\"style_inner__PyrZy\",\"form\":\"style_form__UgjSU\"};"],"sourceRoot":""}